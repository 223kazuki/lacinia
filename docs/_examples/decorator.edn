(require
  '[clojure.core.async :refer [take!]]
  '[com.walmartlabs.lacinia.resolver :as resolve]
  '[com.walmartlabs.lacinia.schema :as schema]
  '[clojure.java.io :as io]
  '[clojure.edn :as edn])
(import '[clojure.core.async.impl.protocols ReadPort])

(defn ^:private chan?
  [v]
  (instance? ReadPort v))

(defn ^:private decorator
  [object-name field-name f]
  (fn [context args value]
    (let [result (f context args value)]
      (if-not (chan? result)
        result
        (let [resolve-promise (resolve/resolve-promise)]
          (take! result
            (fn [value]
              (resolve/deliver! resolve-promise value nil)))
          resolve-promise)))))


(defn create-schema
  []
  (-> (io/resource "sample-scheam.edn")
    slurp
    edn/read-string
    (utils/attach-resolvers {...})
    (schema/compile {:decorator decorator})))
