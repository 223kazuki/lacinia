{

  enum POSSIBLE {
    YES
    NO
  }

  enum FLAVORS {
    CHOCOLATE
    VANILLA
    STRAWBERRY
    CARROT
  }

  scalar Date

  interface Human {
    name: String
    birthDate: Date
  }

  type CharacterOutput implements Human {
    name: String
    birthDate: Date
    preferredIceCreamFlavors: [FLAVORS]
  }

  input Character {
    name: String
    preferredIceCreamFlavors: [FLAVORS]
    birthDate: Date
  }

  type Query {
    lookup(possible: POSSIBLE = YES) : [String]
  }

  type OtherQuery {
    find_by_name(name: String) : Character
  }

  type Mutation {
    add(id: String, value: Character = {name: "Unspecified", preferredIceCreamFlavors: [CARROT]}, possible: POSSIBLE) : Boolean
  }

  union Query2 = OtherQuery
  union Queries = Query | Query2

  schema {
    query: Queries
    mutation: Mutation
  }
}